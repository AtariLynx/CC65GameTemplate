SYMBOLS {
    # Constant values
    __MEMORY_TOP__: value = $fff8, type = export;
    __BLOCKSIZE__:   type = weak, value = $0400; # bank 0 cart block size
    __BANK0BLOCKSIZE__:   type = weak, value = $0400; # bank 0 cart block size
    __BANK1BLOCKSIZE__:   type = weak, value = $0000; # bank 1 block size
    __LOADER_SIZE__: type = import;

    # Handy LNX header
    __LNXHDR__:    type = import;
    __HEADERSIZE__: value = 64, type = export;

    # Directory
    __STARTOFDIRECTORY__: value = __LOADER_SIZE__, type = export;
    __DIRECTORYSIZE__: value = 6*8, type = export;
    
    # Title screen
    __TITLE_START__: type = import;
	__TITLE_SIZE__: type = import;

    # Two buffer screen memory
    __SCREEN_SIZE__: value = 8160, type = export;
    __MEMORY_SCREEN1__: value = __MEMORY_TOP__ - __SCREEN_SIZE__, type = export;
    __MEMORY_SCREEN0__: value = __MEMORY_SCREEN1__ - __SCREEN_SIZE__, type = export;

    # C-stack
    __STACKSIZE__: value = $800, type = export; # 2K stack
    __MEMORY_STACK__: value = __MEMORY_SCREEN0__ - __STACKSIZE__, type = export;

    # Resident RAM
    __RAM_RESIDENT_SIZE__: value = $7A00, type = export;
    __MEMORY_RAM__: value = __MEMORY_STACK__ - __RAM_RESIDENT_SIZE__, type = export;
   
    # Replaceable memory modules
    __MEMORY_MODULES__: value = $0200, type = export;
    __MODULES_SIZE__: value = __MEMORY_RAM__ - __MEMORY_MODULES__, type = export;

    # Aliases for EEPROM functions
    _lynx_eeread: type = export, value = _lynx_eeread_93c46;
    _lynx_eewrite: type = export, value = _lynx_eewrite_93c46;
}
MEMORY {
    ZP:     file = "", define = yes, start = $0000,              size = $0100;
    HEADER: file = %O,               start = $0000,              size = __HEADERSIZE__;
    BOOT:   file = %O,               start = $0000,              size = __STARTOFDIRECTORY__;
    DIR:    file = %O,               start = $0000,              size = __DIRECTORYSIZE__;
    TITLE:  file = %O,               start = __TITLE_START__,    size = __TITLE_SIZE__, ;					  
    MAIN:   file = %O, define = yes, start = __MEMORY_RAM__,     size = __RAM_RESIDENT_SIZE__;
    GAME:   file = %O, define = yes, start = __MEMORY_MODULES__, size = __MODULES_SIZE__;
}
SEGMENTS {
    # LNX header
    LNXHDR: load = HEADER, type = rw, define = yes;
    # encrypted + secondary bootloader
    LOADER: load = BOOT, type = ro;
    # Cartridge directory
    DIRECTORY: load = DIR, type = ro, define = yes;

    # Title screen
    TITLESCR: load = TITLE, type = ro;

    # Resident code
    STARTUP: load = MAIN, type = ro, define = yes;
    LOWCODE: load = MAIN, type = ro, define = yes, optional = yes;
    ONCE: load = MAIN, type = ro, define = yes, optional = yes;
    CODE: load = MAIN, type = ro, define = yes;
    RODATA: load = MAIN, type = ro, define = yes;
    DATA: load = MAIN, type = rw, define = yes; 
    
    GAME_CODE: load = GAME, type = ro, define = yes;
    GAME_RODATA: load = GAME, type = ro, define = yes;
    GAME_DATA: load = GAME, type = rw, define = yes;
    GAME_BSS: load = GAME, type = bss, optional = yes;

    BSS: load = MAIN, type = bss, define = yes;
    ZEROPAGE: load = ZP, type = zp;
    EXTZP: load = ZP, type = zp, optional = yes;
    APPZP: load = ZP, type = zp, optional = yes;
}
FEATURES {
    CONDES: type = constructor,
	        label = __CONSTRUCTOR_TABLE__,
	        count = __CONSTRUCTOR_COUNT__,
            segment = ONCE;
    CONDES: type = destructor,
	        label = __DESTRUCTOR_TABLE__,
	        count = __DESTRUCTOR_COUNT__,
            segment = RODATA;
    CONDES: type = interruptor,
	        label = __INTERRUPTOR_TABLE__,
	        count = __INTERRUPTOR_COUNT__,
	        segment = RODATA,
            import  = __CALLIRQ__;
}